Our conceptual representation of the FILE struct does, however, show the relevant pieces for typical use—we can use this abstraction to think about what a program will do, and thus how to execute it by hand. There is some information about the state of the file (which file is opened, whether it can be read or written, and whether or not the program has attempted to read past the end of the file) shown in the top portion. The bottom portion shows the data in the file, along with the position of the stream (indicated by a blue cursor). Read and write operations will occur at the current position (i.e., this blue cursor), and will advance it.

We will note that real FILE structs do not contain the name of the file, but rather a file descriptor—a numeric identifier returned to the program by the operating system when the program makes the system call to open the file (namely, the open system call). The C library functions which operate on the stream pass this descriptor to the relevant system calls which perform the underlying input/output operations for them.

It is possible for fopen to fail—for example, the file you requested may not exist, or you may not have the permissions required to access it. Whenever fopen fails, it returns NULL (and sets errno appropriately). You should always check the return value of fopen to see if it is NULL or a valid stream before you attempt to use the stream.
